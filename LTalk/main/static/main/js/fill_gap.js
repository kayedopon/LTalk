// filepath: c:\studies\vgtu\1_year\oop\LTalk\LTalk\LTalk\main\static\main\js\fill_gap.js
document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const exerciseArea = document.getElementById('exercise-area');
    const loadingDiv = exerciseArea.querySelector('.loading');
    const questionDisplayDiv = document.getElementById('question-display');
    const sentenceTemplateP = document.getElementById('sentence-template');
    const userAnswerInput = document.getElementById('user-answer-input');
    const submitAnswerBtn = document.getElementById('submit-answer-btn');
    const feedbackArea = document.getElementById('feedback-area');
    const explanationArea = document.getElementById('explanation-area');
    const summaryArea = document.getElementById('summary-area');
    const finalGradeSpan = document.getElementById('final-grade');
    const finalExplanationDiv = document.getElementById('final-explanation');

    // State
    let exercise = null;
    let questions = []; // Array of { key, sentence_template }
    let currentQuestionIndex = 0;
    let userAnswers = {}; // { q_key: answer }

    // --- Helper Functions ---
    function getCSRFToken() {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [key, value] = cookie.trim().split('=');
            if (key === 'csrftoken') {
                return decodeURIComponent(value);
            }
        }
        return '';
    }

    function displayError(message) {
        loadingDiv.style.display = 'none';
        exerciseArea.innerHTML = `<div class="error-message">${message}</div>`;
        summaryArea.style.display = 'none'; // Hide summary if error occurs
    }

    function showLoading() {
        loadingDiv.style.display = 'block';
        questionDisplayDiv.style.display = 'none';
        feedbackArea.style.display = 'none';
        explanationArea.style.display = 'none';
        summaryArea.style.display = 'none';
    }

    function displayQuestion() {
        if (currentQuestionIndex >= questions.length) {
            // All questions answered, submit results
            submitResults();
            return;
        }

        const currentQuestion = questions[currentQuestionIndex];
        // Replace '___' with a styled span or strong tag for better visibility
        const formattedSentence = currentQuestion.sentence_template.replace(
            '___',
            '<strong>___</strong>'
        );
        sentenceTemplateP.innerHTML = formattedSentence; // Use innerHTML to render the strong tag
        userAnswerInput.value = '';
        feedbackArea.style.display = 'none';
        explanationArea.style.display = 'none';
        questionDisplayDiv.style.display = 'block';
        userAnswerInput.focus();
        loadingDiv.style.display = 'none';
    }

    function handleSubmitAnswer() {
        if (currentQuestionIndex >= questions.length) return; // Avoid double submission

        const userAnswer = userAnswerInput.value.trim();
        if (!userAnswer) {
            // Optional: Show a message to enter an answer
            feedbackArea.textContent = "Please enter an answer.";
            feedbackArea.className = 'feedback incorrect'; // Use incorrect style for warning
            feedbackArea.style.display = 'block';
            return;
        }

        const currentQuestionKey = questions[currentQuestionIndex].key;
        userAnswers[currentQuestionKey] = userAnswer;

        // Move to the next question immediately
        currentQuestionIndex++;
        displayQuestion(); // This will either show the next question or trigger submission
    }

    function showSummary(grade, explanation) {
        questionDisplayDiv.style.display = 'none';
        feedbackArea.style.display = 'none';
        explanationArea.style.display = 'none';
        summaryArea.style.display = 'block';
        finalGradeSpan.textContent = grade || 'N/A';
        if (explanation) {
            finalExplanationDiv.textContent = explanation;
            finalExplanationDiv.style.display = 'block';
        } else {
            finalExplanationDiv.style.display = 'none';
        }
    }

    // --- API Calls ---
    async function fetchOrCreateExercise() {
        showLoading();
        try {
            // Attempt to create a new exercise session each time
            const response = await fetch('/api/exercise/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-CSRFToken': getCSRFToken()
                },
                body: JSON.stringify({
                    wordset: wordsetId,
                    type: 'fill_in_the_gap'
                    // Questions/answers are generated by the backend
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                // Check if the error indicates no words available
                if (response.status === 400 && errorData.detail && errorData.detail.includes("Could not generate")) {
                     throw new Error("Could not generate questions. Does the word set have words?");
                }
                throw new Error(`Failed to create exercise: ${JSON.stringify(errorData)} (Status: ${response.status})`);
            }

            exercise = await response.json();
            console.log("Created exercise:", exercise);

            if (exercise && exercise.questions && Object.keys(exercise.questions).length > 0) {
                // Convert questions object into an array for easier iteration
                questions = Object.entries(exercise.questions).map(([key, value]) => ({
                    key: key,
                    sentence_template: value.sentence_template
                }));
                currentQuestionIndex = 0; // Reset index
                userAnswers = {}; // Reset answers
                displayQuestion(); // Display the first question
            } else {
                throw new Error("No questions found in the created exercise. The word set might be empty or generation failed.");
            }

        } catch (error) {
            console.error("Error fetching/creating exercise:", error);
            displayError(`Error loading exercise: ${error.message}`);
        }
    }

    async function submitResults() {
        if (!exercise || !exercise.id) {
            console.error("Cannot submit results, exercise ID is missing.");
            showSummary('Error', 'Could not save results.');
            return;
        }

        const submitUrl = `/api/exercise/${exercise.id}/submit/`;
        const payload = { user_answers: userAnswers };

        console.log("Submitting answers:", payload);
        loadingDiv.textContent = "Submitting results...";
        loadingDiv.style.display = 'block'; // Show loading while submitting
        questionDisplayDiv.style.display = 'none'; // Hide question area

        try {
            const response = await fetch(submitUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'X-CSRFToken': getCSRFToken()
                },
                body: JSON.stringify(payload)
            });

            loadingDiv.style.display = 'none'; // Hide loading

            if (response.ok) {
                const result = await response.json();
                console.log("Submission successful:", result);
                // Assuming the response structure includes exercise_progress array
                const progress = result.exercise_progress && result.exercise_progress.length > 0
                                 ? result.exercise_progress[0]
                                 : null;
                const grade = progress ? progress.grade : 'N/A';
                // Use the explanation from the progress entry if available
                const explanation = progress ? progress.explanation : null;
                showSummary(grade, explanation);
            } else {
                const errorData = await response.json();
                console.error("Submission failed:", errorData);
                showSummary('Error', `Failed to save results: ${JSON.stringify(errorData)}`);
            }
        } catch (error) {
            console.error("Error submitting results:", error);
            loadingDiv.style.display = 'none';
            showSummary('Error', `Network error saving results: ${error.message}`);
        }
    }

    // --- Event Listeners ---
    submitAnswerBtn.addEventListener('click', handleSubmitAnswer);
    // Allow submission on Enter key press in the input field
    userAnswerInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            event.preventDefault(); // Prevent default form submission if it were in a form
            handleSubmitAnswer();
        }
    });

    // --- Initial Load ---
    fetchOrCreateExercise();
});