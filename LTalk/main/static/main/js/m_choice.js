document.addEventListener('DOMContentLoaded', () => {
    const choiceArea = document.getElementById('m_choice-area');
    const summaryArea = document.getElementById('summary');
    const correctCountSpan = document.getElementById('correct-count');
    const incorrectCountSpan = document.getElementById('incorrect-count');


    function getCSRFToken() {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [key, value] = cookie.trim().split('=');
            if (key === 'csrftoken') {
                return decodeURIComponent(value);
            }
        }
        return ''; 
    }

    function displayError(message) {
        choiceArea.innerHTML = `<div class="error-message">${message}</div>`;
        controlsArea.style.display = 'none';
    }

    function showLoading() {
        choice.innerHTML = '<div class="loading">Loading questions...</div>';
        controlsArea.style.display = 'none';
        summaryArea.style.display = 'none';
    }

    function recordAnswer(isCorrect) {
        const questionKey = Object.keys(exercise.questions)[currentQuestionIndex];
        // Submit what the user actually did
        if (isCorrect) {
            userAnswers[questionKey] = exercise.correct_answers[questionKey];
            correctAnswersCount++;
        } else {
            // Use a special value or leave blank to indicate incorrect
            userAnswers[questionKey] = ""; // or null
            incorrectAnswersCount++;
        }
        currentQuestionIndex++;
        // showNextCard();
    }

    function showSummary() {
        choiceArea.innerHTML = '';
        summaryArea.style.display = 'block';
        correctCountSpan.textContent = correctAnswersCount;
        incorrectCountSpan.textContent = incorrectAnswersCount;
    }

    async function fetchOrCreateExercise() {
        showLoading();
        const apiUrl = `/api/exercise/?wordset=${wordsetId}&type=flashcard`;
        try {
            // 1. Try to fetch existing exercise
            let response = await fetch(apiUrl, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-CSRFToken': getCSRFToken() // Needed even for GET if session auth is primary
                }
            });

            if (response.ok) {
                const data = await response.json();
                if (data.results && data.results.length > 0) {
                    exercise = data.results[0]; // Use the first existing exercise
                    console.log("Fetched existing exercise:", exercise);
                } else {
                    // 2. If not found, create one
                    console.log("No existing exercise found, creating new one...");
                    response = await fetch('/api/exercise/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json',
                            'X-CSRFToken': getCSRFToken()
                        },
                        body: JSON.stringify({
                            wordset: wordsetId,
                            type: 'flashcard'
                            // questions/answers are generated by backend
                        })
                    });

                    if (response.ok) {
                        exercise = await response.json();
                        console.log("Created new exercise:", exercise);
                    } else {
                        const errorData = await response.json();
                        throw new Error(`Failed to create exercise: ${JSON.stringify(errorData)}`);
                    }
                }
            } else {
                 const errorData = await response.json();
                 throw new Error(`Failed to fetch exercise: ${JSON.stringify(errorData)}`);
            }

            if (exercise && exercise.questions) {
                questions = Object.values(exercise.questions); // Get array of question objects
                if (questions.length === 0) {
                     displayError("This word set has no words to practice.");
                     return;
                }
                showNextCard();
            } else {
                throw new Error("Exercise data is missing questions.");
            }

        } catch (error) {
            console.error("Error fetching or creating exercise:", error);
            displayError(`Error loading flashcards: ${error.message}`);
        }
    }

})